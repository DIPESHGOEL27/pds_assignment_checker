An image is generally represented as a 2D matrix, where the matrix elements represent the pixel intensity values. Consider a black & white image, which means that pixel values are either 0 or 1 (binary). Given an image, we wish to find the 1's which are "grouped together", and find all such groups in the image. For example, consider the following image matrix:

0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 0 1 1 0 0
0 1 0 0 0 1 0 0 1 0
0 0 1 1 0 0 1 1 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 1 1 1 1 1 1 1 1 0
0 1 1 1 1 1 1 1 1 0
0 0 0 0 0 0 0 0 0 0

In this case, there are 3 groups of 1's. By grouping, we mean when each element of the group is a neighbour of at least another element in the same group. Note that for a pixel, there can be 8 neighbours around it. If the pixel is at i-th row and j-th column, then its neighbours are: (i-1,j-1), (i-1,j), (i-1,j+1), (i,j-1), (i,j+1), (i+1,j-1), (i+1,j), and (i+1,j+1).

These groups are also called "connected components". Now if we represent each group by a unique label (say '1', '2', '3', etc), then the resultant image matrix will be the following:

0 0 0 0 0 0 0 0 0 0
0 0 1 1 0 0 2 2 0 0
0 1 0 0 0 2 0 0 2 0
0 0 1 1 0 0 2 2 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 3 3 3 3 3 3 3 3 0
0 3 3 3 3 3 3 3 3 0
0 0 0 0 0 0 0 0 0 0

Your task is to take from the user the image data and create a 2D image matrix by dynamic memory allocation. Next, find the connected components in the image and label them as shown above, create a new matrix using the labelling, and return it.

Ex:
Enter the image size: 6  5
Enter the image:
0 1 0 0 0
0 1 1 1 0
0 1 0 0 0
0 0 0 0 0
0 0 0 0 0
1 0 0 1 1

Output image with labelled connected components:
0 1 0 0 0
0 1 1 1 0
0 1 0 0 0
0 0 0 0 0
0 0 0 0 0
2 0 0 3 3
Number of connected components = 3